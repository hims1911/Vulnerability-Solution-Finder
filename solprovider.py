import re
import json
import sys

lookup = 'exit'
jsondata = []
appenddata = ""

lang = sys.argv[2]
filename = sys.argv[1]
offsetgo = []
with open(filename) as myFile:
    lines = myFile.readlines()


def vuldetector():
    for num, line in enumerate(lines, 1):
        cryptography = re.findall(r"(.+\s*=\s*.+\.getInstance\(\"AES\"\))", line)
        SQLinjection = re.findall(r".*(\.*executequery\(.+\))", line)
        exit = re.findall(r"[^.](exit\(.*\))", line)
        Cross_site_script = re.findall(r"(.+\s*=\s*.+\.getParameter\(\".+\"\))", line)
        if "python" in lang:
            if exit:
                appenddata = {"category": "insecure data",
                              "line_number": num,
                              "vul_pattern": line}
                jsondata.append(appenddata)
        if "java" in lang:
            if SQLinjection:
                appenddata = {"category": "SQL injection",
                              "line_number": num,
                              "vul_pattern": line}
                jsondata.append(appenddata)
            elif cryptography:
                appenddata = {"category": "Weak cryptography",
                              "line_number": num,
                              "vul_pattern": line}
                jsondata.append(appenddata)
            elif Cross_site_script:
                appenddata = {"category": "Cross site scripting",
                              "line_number": num,
                              "vul_pattern": line}
                jsondata.append(appenddata)

    vuljson = json.dumps(jsondata, indent=1)

    file = open("vuln_data", "w")
    file.write(vuljson)
    file.close()
    return vuljson


def auto_correct(returndata):
    jsonL = json.loads(returndata)
    for js in jsonL:
        if "java" in lang:
            if "Weak cryptography" in js['category']:
                offset = 0
                vul_code = js['vul_pattern'].strip()
                if ".getInstance(" in vul_code:
                    var = re.findall(r'\.getInstance\((.*?)\)', vul_code)
                    var = vul_code.replace(var[0], "\"AES/GCM/NoPadding\"")
                    fix_code = var + "\n"
                    ReplaceCodeinfile(js, fix_code, offset)
            elif "Cross site scripting" in js['category']:
                offset = 0
                vul_code = js['vul_pattern'].strip()
                if ".getParameter(" in vul_code:
                    var = re.findall(r'\.getParameter\(\"(.*?)\"\)', vul_code)
                    fix_code = vul_code + "\n" + "String encodedName = org.owasp.encoder.Encode.forHtml("+var[0]+");\n"
                    ReplaceCodeinfile(js, fix_code, offset)
            # elif "SQL injection" in js['category']:
            #     offset = 0
            #     vul_code = js['vul_pattern'].strip()
            #     if ".executequery(" in vul_code:
            #         var = re.findall(r'\.getParameter\(\"(.*?)\"\)', vul_code)
            #         fix_code = vul_code + "\n" + "String encodedName = org.owasp.encoder.Encode.forHtml("+var[0]+");\n"
            #         ReplaceCodeinfile(js, fix_code, offset)


def ReplaceCodeinfile(js, fixcode, offset):
    count = js['line_number']+offset
    a_file = open(filename, "r")
    list_of_lines = a_file.readlines()
    list_of_lines[count-1] = fixcode
    a_file = open(filename, "w")
    a_file.writelines(list_of_lines)
    a_file.close()

vuljson1 = vuldetector()

auto_correct(vuljson1)
print(vuljson1)